{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/auth/email-login": {
      "post": {
        "operationId": "AuthController_login_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthEmailLoginDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/email-register": {
      "post": {
        "operationId": "AuthController_register_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthEmailRegisterDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/email-confirm": {
      "post": {
        "operationId": "AuthController_confirmEmail_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmOtpEmailDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "operationId": "AuthController_me_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      },
      "put": {
        "operationId": "AuthController_update_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "data": {
                    "$ref": "#/components/schemas/AuthUpdateDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      },
      "delete": {
        "operationId": "AuthController_delete_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "operationId": "AuthController_refresh_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "operationId": "AuthController_logout_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/me/new-password": {
      "put": {
        "operationId": "AuthController_newPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthNewPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth-tenants/email-login": {
      "post": {
        "operationId": "AuthTenantController_login_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthAdminEmailLoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/email-register": {
      "post": {
        "operationId": "AuthTenantController_register_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/email-confirm": {
      "post": {
        "operationId": "AuthTenantController_confirmEmail_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmOtpEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/forgot-password": {
      "post": {
        "operationId": "AuthTenantController_forgotPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthAdminForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/reset-password": {
      "post": {
        "operationId": "AuthTenantController_resetPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/me": {
      "get": {
        "operationId": "AuthTenantController_me_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      },
      "put": {
        "operationId": "AuthTenantController_update_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      },
      "delete": {
        "operationId": "AuthTenantController_delete_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/refresh": {
      "post": {
        "operationId": "AuthTenantController_refresh_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/logout": {
      "post": {
        "operationId": "AuthTenantController_adminLogout_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/auth-tenants/me/new-password": {
      "put": {
        "operationId": "AuthTenantController_newPassword_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthNewPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Auth tenants"
        ]
      }
    },
    "/api/v1/users": {
      "post": {
        "operationId": "UsersController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAllPaginated_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.email",
            "required": false,
            "in": "query",
            "description": "Filter by email query param.\n          <p>\n             <b>Format: </b> filter.email={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.email=$not:$like:John Doe&filter.email=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.userName",
            "required": false,
            "in": "query",
            "description": "Filter by userName query param.\n          <p>\n             <b>Format: </b> filter.userName={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.userName=$not:$like:John Doe&filter.userName=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.phone",
            "required": false,
            "in": "query",
            "description": "Filter by phone query param.\n          <p>\n             <b>Format: </b> filter.phone={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.phone=$not:$like:John Doe&filter.phone=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.createdAt",
            "required": false,
            "in": "query",
            "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.createdAt=$not:$like:John Doe&filter.createdAt=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$gte</li>\n<li>$lte</li>\n<li>$btw</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.address.city",
            "required": false,
            "in": "query",
            "description": "Filter by address.city query param.\n          <p>\n             <b>Format: </b> filter.address.city={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.address.city=$not:$like:John Doe&filter.address.city=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status.name",
            "required": false,
            "in": "query",
            "description": "Filter by status.name query param.\n          <p>\n             <b>Format: </b> filter.status.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status.name=$not:$like:John Doe&filter.status.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>email</li>\n<li>address.city</li>\n<li>createdAt</li>\n<li>updatedAt</li>\n<li>status</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "email:ASC",
                  "email:DESC",
                  "address.city:ASC",
                  "address.city:DESC",
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "status:ASC",
                  "status:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> email,role.name,status.name,address.country,address.city\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>email</li>\n<li>role.name</li>\n<li>status.name</li>\n<li>address.country</li>\n<li>address.city</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDocumented"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserDto"
                          }
                        },
                        "meta": {
                          "properties": {
                            "select": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "filter": {
                              "type": "object",
                              "properties": {
                                "email": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "userName": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "phone": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "createdAt": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "address.city": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "status.name": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "put": {
        "operationId": "UsersController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/address": {
      "post": {
        "operationId": "AddressController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Address"
        ]
      },
      "get": {
        "operationId": "AddressController_findAll_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Address"
        ]
      }
    },
    "/api/v1/address/{id}": {
      "get": {
        "operationId": "AddressController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Address"
        ]
      },
      "put": {
        "operationId": "AddressController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Address"
        ]
      },
      "delete": {
        "operationId": "AddressController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Address"
        ]
      }
    },
    "/api/v1/files/upload": {
      "post": {
        "operationId": "FilesController_uploadFile_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/upload-multiple": {
      "post": {
        "operationId": "FilesController_uploadMultipleFiles_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/local/{path}": {
      "get": {
        "operationId": "FilesController_displayFile_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/presigned/{type}": {
      "get": {
        "operationId": "FilesController_getPresignedUrl_v1",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files": {
      "get": {
        "operationId": "FilesController_findAllPaginated_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.path",
            "required": false,
            "in": "query",
            "description": "Filter by path query param.\n          <p>\n             <b>Format: </b> filter.path={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.path=$not:$like:John Doe&filter.path=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>path</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "path:ASC",
                  "path:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> path\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>path</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/files/{id}": {
      "get": {
        "operationId": "FilesController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Files"
        ]
      },
      "put": {
        "description": "This endpoint update a file in storage and database.",
        "operationId": "FilesController_updateFile_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a file in storage and database",
        "tags": [
          "Files"
        ]
      },
      "delete": {
        "description": "This endpoint delete a file from storage and database.",
        "operationId": "FilesController_deleteFile_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a file in storage and database",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/users-tenant": {
      "post": {
        "operationId": "UsersTenantController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenants"
        ]
      },
      "get": {
        "operationId": "UsersTenantController_findAllPaginated_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.email",
            "required": false,
            "in": "query",
            "description": "Filter by email query param.\n          <p>\n             <b>Format: </b> filter.email={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.email=$not:$like:John Doe&filter.email=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.userName",
            "required": false,
            "in": "query",
            "description": "Filter by userName query param.\n          <p>\n             <b>Format: </b> filter.userName={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.userName=$not:$like:John Doe&filter.userName=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.createdAt",
            "required": false,
            "in": "query",
            "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.createdAt=$not:$like:John Doe&filter.createdAt=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$gte</li>\n<li>$lte</li>\n<li>$btw</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status.name",
            "required": false,
            "in": "query",
            "description": "Filter by status.name query param.\n          <p>\n             <b>Format: </b> filter.status.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status.name=$not:$like:John Doe&filter.status.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>email</li>\n<li>createdAt</li>\n<li>updatedAt</li>\n<li>status</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "email:ASC",
                  "email:DESC",
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "status:ASC",
                  "status:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> email,role.name,status.name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>email</li>\n<li>role.name</li>\n<li>status.name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDocumented"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserTenantDto"
                          }
                        },
                        "meta": {
                          "properties": {
                            "select": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "filter": {
                              "type": "object",
                              "properties": {
                                "email": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "userName": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "createdAt": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "status.name": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/api/v1/users-tenant/{id}": {
      "get": {
        "operationId": "UsersTenantController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenants"
        ]
      },
      "patch": {
        "operationId": "UsersTenantController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenants"
        ]
      },
      "delete": {
        "operationId": "UsersTenantController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/api/v1/mail/send/dummy": {
      "post": {
        "operationId": "MailController_sendDummyMail_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Mail"
        ]
      }
    },
    "/api/v1/otp/verify": {
      "post": {
        "operationId": "OtpController_verifyOtp_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmOtpEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Otp"
        ]
      }
    },
    "/api/v1/otp": {
      "get": {
        "operationId": "OtpController_findAll_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Otp"
        ]
      }
    },
    "/api/v1/otp/{id}": {
      "delete": {
        "operationId": "OtpController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Otp"
        ]
      }
    },
    "/api/v1/otp/resend": {
      "put": {
        "operationId": "OtpController_resendOtp_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Otp"
        ]
      }
    },
    "/api/v1/chats/group": {
      "post": {
        "operationId": "ChatController_createGroup_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      }
    },
    "/api/v1/chats": {
      "get": {
        "operationId": "ChatController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> updatedAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>name</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "name:ASC",
                  "name:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      }
    },
    "/api/v1/chats/all/me": {
      "get": {
        "operationId": "ChatController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> updatedAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>name</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "name:ASC",
                  "name:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      }
    },
    "/api/v1/chats/{id}": {
      "get": {
        "operationId": "ChatController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      },
      "put": {
        "operationId": "ChatController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      },
      "delete": {
        "operationId": "ChatController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chat"
        ]
      }
    },
    "/api/v1/companies": {
      "post": {
        "operationId": "CompanyController_create_v1",
        "parameters": [
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Companies"
        ]
      },
      "get": {
        "operationId": "CompanyController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.verified",
            "required": false,
            "in": "query",
            "description": "Filter by verified query param.\n          <p>\n             <b>Format: </b> filter.verified={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.verified=$not:$like:John Doe&filter.verified=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.address.country",
            "required": false,
            "in": "query",
            "description": "Filter by address.country query param.\n          <p>\n             <b>Format: </b> filter.address.country={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.address.country=$not:$like:John Doe&filter.address.country=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.categories.id",
            "required": false,
            "in": "query",
            "description": "Filter by categories.id query param.\n          <p>\n             <b>Format: </b> filter.categories.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.categories.id=$not:$like:John Doe&filter.categories.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>name</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "name:ASC",
                  "name:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/companies/{id}": {
      "get": {
        "operationId": "CompanyController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Companies"
        ]
      },
      "put": {
        "operationId": "CompanyController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateCompanyDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Companies"
        ]
      },
      "delete": {
        "operationId": "CompanyController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/v1/company-categories/main-category": {
      "post": {
        "operationId": "CompanyCategoryController_createMainCategory_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-categories/sub-category/{parentId}": {
      "post": {
        "operationId": "CompanyCategoryController_createSubCategory_v1",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-categories/list/parents": {
      "get": {
        "operationId": "CompanyCategoryController_findAllParent_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.value",
            "required": false,
            "in": "query",
            "description": "Filter by value query param.\n          <p>\n             <b>Format: </b> filter.value={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.value=$not:$like:John Doe&filter.value=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>value</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "value:ASC",
                  "value:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> value,parent.id\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>value</li>\n<li>parent.id</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-categories": {
      "get": {
        "operationId": "CompanyCategoryController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.value",
            "required": false,
            "in": "query",
            "description": "Filter by value query param.\n          <p>\n             <b>Format: </b> filter.value={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.value=$not:$like:John Doe&filter.value=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>value</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "value:ASC",
                  "value:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> value,parent.id\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>value</li>\n<li>parent.id</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-categories/list/children": {
      "get": {
        "operationId": "CompanyCategoryController_findAllListed_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-categories/{id}": {
      "get": {
        "operationId": "CompanyCategoryController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      },
      "put": {
        "operationId": "CompanyCategoryController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      },
      "delete": {
        "operationId": "CompanyCategoryController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Categories"
        ]
      }
    },
    "/api/v1/company-posts/companies/{companyId}/categories/{categoryId}": {
      "post": {
        "operationId": "CompanyPostController_create_v1",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyPostDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Posts"
        ]
      }
    },
    "/api/v1/company-posts": {
      "get": {
        "operationId": "CompanyPostController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.company.id",
            "required": false,
            "in": "query",
            "description": "Filter by company.id query param.\n          <p>\n             <b>Format: </b> filter.company.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.id=$not:$like:John Doe&filter.company.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Posts"
        ]
      }
    },
    "/api/v1/company-posts/{id}": {
      "get": {
        "operationId": "CompanyPostController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Posts"
        ]
      },
      "put": {
        "operationId": "CompanyPostController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyPostDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Posts"
        ]
      },
      "delete": {
        "operationId": "CompanyPostController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Posts"
        ]
      }
    },
    "/api/v1/post-categories": {
      "post": {
        "operationId": "PostCategoryController_createMainCategory_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Post Categories"
        ]
      },
      "get": {
        "operationId": "PostCategoryController_findAll_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Post Categories"
        ]
      }
    },
    "/api/v1/post-categories/{id}": {
      "get": {
        "operationId": "PostCategoryController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Post Categories"
        ]
      },
      "put": {
        "operationId": "PostCategoryController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Post Categories"
        ]
      },
      "delete": {
        "operationId": "PostCategoryController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Post Categories"
        ]
      }
    },
    "/api/v1/company-offers/companies/{companyId}/categories/{categoryId}": {
      "post": {
        "operationId": "CompanyOfferController_create_v1",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyOfferDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Offers"
        ]
      }
    },
    "/api/v1/company-offers": {
      "get": {
        "operationId": "CompanyOfferController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.company.id",
            "required": false,
            "in": "query",
            "description": "Filter by company.id query param.\n          <p>\n             <b>Format: </b> filter.company.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.id=$not:$like:John Doe&filter.company.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Offers"
        ]
      }
    },
    "/api/v1/company-offers/{id}": {
      "get": {
        "operationId": "CompanyOfferController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Offers"
        ]
      },
      "put": {
        "operationId": "CompanyOfferController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateCompanyOfferDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Offers"
        ]
      },
      "delete": {
        "operationId": "CompanyOfferController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Offers"
        ]
      }
    },
    "/api/v1/subscription-tokens": {
      "post": {
        "operationId": "CompanySubscriptionTokenController_create_v1",
        "parameters": [
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanySubscriptionTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Subscription Tokens"
        ]
      },
      "get": {
        "operationId": "CompanySubscriptionTokenController_findAll_v1",
        "parameters": [
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.company.name",
            "required": false,
            "in": "query",
            "description": "Filter by company.name query param.\n          <p>\n             <b>Format: </b> filter.company.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.name=$not:$like:John Doe&filter.company.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> company.name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>company.name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Subscription Tokens"
        ]
      }
    },
    "/api/v1/subscription-tokens/{id}": {
      "get": {
        "operationId": "CompanySubscriptionTokenController_findOne_v1",
        "parameters": [
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Subscription Tokens"
        ]
      },
      "delete": {
        "operationId": "CompanySubscriptionTokenController_remove_v1",
        "parameters": [
          {
            "name": "tenant-id",
            "in": "header",
            "description": "Tenant-Id header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Subscription Tokens"
        ]
      }
    },
    "/api/v1/token-categories": {
      "post": {
        "operationId": "TokenCategoryController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Token Categories"
        ]
      },
      "get": {
        "operationId": "TokenCategoryController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.name=$not:$like:John Doe&filter.name=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>name</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "name:ASC",
                  "name:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> name\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>name</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Token Categories"
        ]
      }
    },
    "/api/v1/token-categories/{id}": {
      "get": {
        "operationId": "TokenCategoryController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Token Categories"
        ]
      },
      "put": {
        "operationId": "TokenCategoryController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTokenCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Token Categories"
        ]
      },
      "delete": {
        "operationId": "TokenCategoryController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Token Categories"
        ]
      }
    },
    "/api/v1/company-participation-user-tenders/tenders/{tenderId}/companies/{companyId}": {
      "post": {
        "operationId": "CompanyParticipationUserTenderController_create_v1",
        "parameters": [
          {
            "name": "tenderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyParticipationUserTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      }
    },
    "/api/v1/company-participation-user-tenders": {
      "get": {
        "operationId": "CompanyParticipationUserTenderController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status",
            "required": false,
            "in": "query",
            "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status=$not:$like:John Doe&filter.status=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.tender.id",
            "required": false,
            "in": "query",
            "description": "Filter by tender.id query param.\n          <p>\n             <b>Format: </b> filter.tender.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.tender.id=$not:$like:John Doe&filter.tender.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      }
    },
    "/api/v1/company-participation-user-tenders/me": {
      "get": {
        "operationId": "CompanyParticipationUserTenderController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status",
            "required": false,
            "in": "query",
            "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status=$not:$like:John Doe&filter.status=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.tender.id",
            "required": false,
            "in": "query",
            "description": "Filter by tender.id query param.\n          <p>\n             <b>Format: </b> filter.tender.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.tender.id=$not:$like:John Doe&filter.tender.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      }
    },
    "/api/v1/company-participation-user-tenders/{id}": {
      "get": {
        "operationId": "CompanyParticipationUserTenderController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      },
      "put": {
        "operationId": "CompanyParticipationUserTenderController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateCompanyParticipationUserTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      },
      "delete": {
        "operationId": "CompanyParticipationUserTenderController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      }
    },
    "/api/v1/company-participation-user-tenders/accept/{id}": {
      "put": {
        "operationId": "CompanyParticipationUserTenderController_approve_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation User Tenders"
        ]
      }
    },
    "/api/v1/user-tenders/categories/{categoryId}": {
      "post": {
        "operationId": "UserTenderController_create_v1",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateUserTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      }
    },
    "/api/v1/user-tenders": {
      "get": {
        "operationId": "UserTenderController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,content\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>content</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      }
    },
    "/api/v1/user-tenders/me": {
      "get": {
        "operationId": "UserTenderController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,content\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>content</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      }
    },
    "/api/v1/user-tenders/{id}": {
      "get": {
        "operationId": "UserTenderController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      },
      "put": {
        "operationId": "UserTenderController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateUserTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      },
      "delete": {
        "operationId": "UserTenderController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Tenders"
        ]
      }
    },
    "/api/v1/tender-categories": {
      "post": {
        "operationId": "TenderCategoryController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenderCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Tender Categories"
        ]
      },
      "get": {
        "operationId": "TenderCategoryController_findAll_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Tender Categories"
        ]
      }
    },
    "/api/v1/tender-categories/{id}": {
      "get": {
        "operationId": "TenderCategoryController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Tender Categories"
        ]
      },
      "put": {
        "operationId": "TenderCategoryController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenderCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Tender Categories"
        ]
      },
      "delete": {
        "operationId": "TenderCategoryController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Tender Categories"
        ]
      }
    },
    "/api/v1/notifications": {
      "post": {
        "operationId": "NotificationController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      },
      "get": {
        "operationId": "NotificationController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.message",
            "required": false,
            "in": "query",
            "description": "Filter by message query param.\n          <p>\n             <b>Format: </b> filter.message={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.message=$not:$like:John Doe&filter.message=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.forAllUsers",
            "required": false,
            "in": "query",
            "description": "Filter by forAllUsers query param.\n          <p>\n             <b>Format: </b> filter.forAllUsers={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.forAllUsers=$not:$like:John Doe&filter.forAllUsers=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.active",
            "required": false,
            "in": "query",
            "description": "Filter by active query param.\n          <p>\n             <b>Format: </b> filter.active={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.active=$not:$like:John Doe&filter.active=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.typeOfSending",
            "required": false,
            "in": "query",
            "description": "Filter by typeOfSending query param.\n          <p>\n             <b>Format: </b> filter.typeOfSending={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.typeOfSending=$not:$like:John Doe&filter.typeOfSending=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>active</li>\n<li>typeOfSending</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "active:ASC",
                  "active:DESC",
                  "typeOfSending:ASC",
                  "typeOfSending:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,message,typeOfSending\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>message</li>\n<li>typeOfSending</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/all/_me": {
      "get": {
        "operationId": "NotificationController_findAllMyNotifications_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.isRead",
            "required": false,
            "in": "query",
            "description": "Filter by isRead query param.\n          <p>\n             <b>Format: </b> filter.isRead={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.isRead=$not:$like:John Doe&filter.isRead=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>isRead</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "isRead:ASC",
                  "isRead:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> isRead\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>isRead</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/{id}": {
      "get": {
        "operationId": "NotificationController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      },
      "patch": {
        "operationId": "NotificationController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      },
      "delete": {
        "operationId": "NotificationController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/company-tenders/companies/{companyId}/categories/{categoryId}": {
      "post": {
        "operationId": "CompanyTenderController_create_v1",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      }
    },
    "/api/v1/company-tenders": {
      "get": {
        "operationId": "CompanyTenderController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.company.id",
            "required": false,
            "in": "query",
            "description": "Filter by company.id query param.\n          <p>\n             <b>Format: </b> filter.company.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.id=$not:$like:John Doe&filter.company.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.active",
            "required": false,
            "in": "query",
            "description": "Filter by active query param.\n          <p>\n             <b>Format: </b> filter.active={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.active=$not:$like:John Doe&filter.active=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,content\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>content</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      }
    },
    "/api/v1/company-tenders/companies/{companyId}": {
      "get": {
        "operationId": "CompanyTenderController_findAllOthers_v1",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.company.id",
            "required": false,
            "in": "query",
            "description": "Filter by company.id query param.\n          <p>\n             <b>Format: </b> filter.company.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.id=$not:$like:John Doe&filter.company.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.active",
            "required": false,
            "in": "query",
            "description": "Filter by active query param.\n          <p>\n             <b>Format: </b> filter.active={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.active=$not:$like:John Doe&filter.active=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,content\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>content</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      }
    },
    "/api/v1/company-tenders/me": {
      "get": {
        "operationId": "CompanyTenderController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li>\n<li>$ilike</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.category.id",
            "required": false,
            "in": "query",
            "description": "Filter by category.id query param.\n          <p>\n             <b>Format: </b> filter.category.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.category.id=$not:$like:John Doe&filter.category.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.company.id",
            "required": false,
            "in": "query",
            "description": "Filter by company.id query param.\n          <p>\n             <b>Format: </b> filter.company.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.company.id=$not:$like:John Doe&filter.company.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.active",
            "required": false,
            "in": "query",
            "description": "Filter by active query param.\n          <p>\n             <b>Format: </b> filter.active={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.active=$not:$like:John Doe&filter.active=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title,content\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li>\n<li>content</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      }
    },
    "/api/v1/company-tenders/{id}": {
      "get": {
        "operationId": "CompanyTenderController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      },
      "put": {
        "operationId": "CompanyTenderController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateCompanyTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      },
      "delete": {
        "operationId": "CompanyTenderController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Tenders"
        ]
      }
    },
    "/api/v1/company-participation-company-tenders/tenders/{tenderId}/companies/{companyId}": {
      "post": {
        "operationId": "CompanyParticipationCompanyTenderController_create_v1",
        "parameters": [
          {
            "name": "tenderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/CreateCompanyParticipationCompanyTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      }
    },
    "/api/v1/company-participation-company-tenders": {
      "get": {
        "operationId": "CompanyParticipationCompanyTenderController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status",
            "required": false,
            "in": "query",
            "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status=$not:$like:John Doe&filter.status=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.tender.id",
            "required": false,
            "in": "query",
            "description": "Filter by tender.id query param.\n          <p>\n             <b>Format: </b> filter.tender.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.tender.id=$not:$like:John Doe&filter.tender.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      }
    },
    "/api/v1/company-participation-company-tenders/me": {
      "get": {
        "operationId": "CompanyParticipationCompanyTenderController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.title",
            "required": false,
            "in": "query",
            "description": "Filter by title query param.\n          <p>\n             <b>Format: </b> filter.title={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.title=$not:$like:John Doe&filter.title=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.status",
            "required": false,
            "in": "query",
            "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.status=$not:$like:John Doe&filter.status=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.tender.id",
            "required": false,
            "in": "query",
            "description": "Filter by tender.id query param.\n          <p>\n             <b>Format: </b> filter.tender.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.tender.id=$not:$like:John Doe&filter.tender.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>title</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "title:ASC",
                  "title:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> title\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>title</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      }
    },
    "/api/v1/company-participation-company-tenders/{id}": {
      "get": {
        "operationId": "CompanyParticipationCompanyTenderController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      },
      "put": {
        "operationId": "CompanyParticipationCompanyTenderController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "data": {
                    "$ref": "#/components/schemas/UpdateCompanyParticipationCompanyTenderDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      },
      "delete": {
        "operationId": "CompanyParticipationCompanyTenderController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      }
    },
    "/api/v1/company-participation-company-tenders/accept/{id}": {
      "put": {
        "operationId": "CompanyParticipationCompanyTenderController_approve_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Company Participation Company Tenders"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthController_healthCheck_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/health/info": {
      "get": {
        "operationId": "HealthController_appInfo_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "operationId": "OauthController_loginGoogle_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Oauth"
        ]
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "operationId": "OauthController_googleCallback_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Oauth"
        ]
      }
    },
    "/api/v1/matches/offers/{offerId}": {
      "post": {
        "operationId": "UserRequestOfferController_create_v1",
        "parameters": [
          {
            "name": "offerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequestOfferDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      }
    },
    "/api/v1/matches": {
      "get": {
        "operationId": "UserRequestOfferController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.offer.id",
            "required": false,
            "in": "query",
            "description": "Filter by offer.id query param.\n          <p>\n             <b>Format: </b> filter.offer.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.offer.id=$not:$like:John Doe&filter.offer.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>request</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "request:ASC",
                  "request:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> request\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>request</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      }
    },
    "/api/v1/matches/me": {
      "get": {
        "operationId": "UserRequestOfferController_findAllMe_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.offer.id",
            "required": false,
            "in": "query",
            "description": "Filter by offer.id query param.\n          <p>\n             <b>Format: </b> filter.offer.id={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.offer.id=$not:$like:John Doe&filter.offer.id=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li>\n<li>request</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC",
                  "request:ASC",
                  "request:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> request\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>request</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      }
    },
    "/api/v1/matches/{id}": {
      "get": {
        "operationId": "UserRequestOfferController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      },
      "put": {
        "operationId": "UserRequestOfferController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequestOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      },
      "delete": {
        "operationId": "UserRequestOfferController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Request offer"
        ]
      }
    },
    "/api/v1/user-testimonials": {
      "post": {
        "operationId": "UserTestimonialController_create_v1",
        "parameters": [
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserTestimonialDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Testimonials"
        ]
      },
      "get": {
        "operationId": "UserTestimonialController_findAll_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.createdAt",
            "required": false,
            "in": "query",
            "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.createdAt=$not:$like:John Doe&filter.createdAt=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$eq</li>\n<li>$not</li></ul>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li>\n<li>updatedAt</li></ul>\n      ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "createdAt:ASC",
                  "createdAt:DESC",
                  "updatedAt:ASC",
                  "updatedAt:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n        <p>\n             <b>Example: </b> John\n          </p>\n        <p>\n             <b>Default Value: </b> No default value\n          </p>\n        ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Example: </b> rate\n          </p>\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4>Available Fields</h4><ul><li>rate</li></ul>\n        ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Testimonials"
        ]
      }
    },
    "/api/v1/user-testimonials/{id}": {
      "get": {
        "operationId": "UserTestimonialController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Testimonials"
        ]
      },
      "put": {
        "operationId": "UserTestimonialController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTestimonialDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Testimonials"
        ]
      },
      "delete": {
        "operationId": "UserTestimonialController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-custom-lang",
            "required": true,
            "in": "header",
            "schema": {
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "User Testimonials"
        ]
      }
    }
  },
  "info": {
    "title": "Moorish social API",
    "description": "Swagger docs",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "AuthEmailLoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@weavers.com"
          },
          "password": {
            "type": "string",
            "example": "H@mza12345"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          }
        },
        "required": [
          "email",
          "password",
          "notificationsToken"
        ]
      },
      "SessionResponseDto": {
        "type": "object",
        "properties": {}
      },
      "CreateAddressDto": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "longitude": {
            "type": "number"
          },
          "latitude": {
            "type": "number"
          },
          "street": {
            "type": "string"
          }
        },
        "required": [
          "country",
          "city",
          "longitude",
          "latitude",
          "street"
        ]
      },
      "AuthEmailRegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@weavers.com"
          },
          "password": {
            "type": "string",
            "example": "H@mza12345"
          },
          "userName": {
            "type": "string",
            "example": "John"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressDto"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          }
        },
        "required": [
          "email",
          "password",
          "userName",
          "address",
          "notificationsToken"
        ]
      },
      "ConfirmOtpEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the Otp."
          },
          "otp": {
            "type": "string",
            "description": "The confirmation otp of the SMS."
          }
        },
        "required": [
          "email",
          "otp"
        ]
      },
      "AuthForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "AuthResetPasswordDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "password",
          "email"
        ]
      },
      "AuthUpdateDto": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "object",
            "example": "John"
          },
          "address": {
            "type": "object"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "notificationsToken": {
            "type": "object"
          }
        },
        "required": [
          "userName",
          "address",
          "phone",
          "email",
          "password",
          "notificationsToken"
        ]
      },
      "AuthNewPasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        },
        "required": [
          "oldPassword",
          "newPassword"
        ]
      },
      "AuthAdminEmailLoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test1@tenant.com"
          },
          "password": {
            "type": "string",
            "example": "H@mza12345"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          }
        },
        "required": [
          "email",
          "password",
          "notificationsToken"
        ]
      },
      "CreateUserTenantDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test1@tenant.com"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string",
            "example": "H@mza12345"
          },
          "whatsApp": {
            "type": "string",
            "example": "0021655456398"
          },
          "position": {
            "type": "string",
            "example": "Manager"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "password",
          "whatsApp",
          "position"
        ]
      },
      "AuthAdminForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "RoleDto": {
        "type": "object",
        "properties": {}
      },
      "StatusesDto": {
        "type": "object",
        "properties": {}
      },
      "FileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "path",
          "mimeType"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test1@example.com"
          },
          "role": {
            "$ref": "#/components/schemas/RoleDto"
          },
          "status": {
            "$ref": "#/components/schemas/StatusesDto"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressDto"
          },
          "photo": {
            "$ref": "#/components/schemas/FileDto"
          },
          "userName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          }
        },
        "required": [
          "email",
          "role",
          "status",
          "address",
          "photo",
          "userName",
          "lastName",
          "password",
          "notificationsToken"
        ]
      },
      "PaginatedMetaDocumented": {
        "type": "object",
        "properties": {
          "itemsPerPage": {
            "type": "number",
            "title": "Number of items per page"
          },
          "totalItems": {
            "type": "number",
            "title": "Total number of items"
          },
          "currentPage": {
            "type": "number",
            "title": "Current requested page"
          },
          "totalPages": {
            "type": "number",
            "title": "Total number of pages"
          },
          "sortBy": {
            "type": "array",
            "title": "Sorting by columns",
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                ]
              }
            }
          },
          "searchBy": {
            "title": "Search by fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "search": {
            "type": "string",
            "title": "Search term"
          },
          "select": {
            "title": "List of selected fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "type": "object",
            "title": "Filters that applied to the query",
            "additionalProperties": false
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "currentPage",
          "totalPages",
          "filter"
        ]
      },
      "PaginatedLinksDocumented": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "title": "Link to first page"
          },
          "previous": {
            "type": "string",
            "title": "Link to previous page"
          },
          "current": {
            "type": "string",
            "title": "Link to current page"
          },
          "next": {
            "type": "string",
            "title": "Link to next page"
          },
          "last": {
            "type": "string",
            "title": "Link to last page"
          }
        }
      },
      "PaginatedDocumented": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Array of entities",
            "additionalProperties": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "meta": {
            "title": "Pagination Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedMetaDocumented"
              }
            ]
          },
          "links": {
            "title": "Links to pages",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedLinksDocumented"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta",
          "links"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test1@example.com"
          },
          "role": {
            "$ref": "#/components/schemas/RoleDto"
          },
          "status": {
            "$ref": "#/components/schemas/StatusesDto"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressDto"
          },
          "photo": {
            "$ref": "#/components/schemas/FileDto"
          },
          "userName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          }
        }
      },
      "UpdateAddressDto": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "longitude": {
            "type": "number"
          },
          "latitude": {
            "type": "number"
          },
          "street": {
            "type": "string"
          }
        }
      },
      "UserTenantDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserTenantDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test1@tenant.com"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string",
            "example": "H@mza12345"
          },
          "whatsApp": {
            "type": "string",
            "example": "0021655456398"
          },
          "position": {
            "type": "string",
            "example": "Manager"
          },
          "role": {
            "$ref": "#/components/schemas/RoleDto"
          },
          "status": {
            "$ref": "#/components/schemas/StatusesDto"
          },
          "photo": {
            "$ref": "#/components/schemas/FileDto"
          },
          "userName": {
            "type": "string",
            "example": "John"
          },
          "notificationsToken": {
            "type": "string",
            "example": "xe8emg58q2x27ohlfuz7n76u3btbzz4a"
          },
          "subscriptionExpiryDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "role",
          "status",
          "photo",
          "userName",
          "notificationsToken",
          "subscriptionExpiryDate"
        ]
      },
      "ResendVerifyOtpDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email."
          }
        },
        "required": [
          "email"
        ]
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateChatDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressDto"
          },
          "hexColor": {
            "type": "string",
            "example": "#ffffff"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registrationNumber": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "address",
          "hexColor",
          "categories",
          "registrationNumber"
        ]
      },
      "UpdateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressDto"
          }
        },
        "required": [
          "name",
          "description",
          "address"
        ]
      },
      "CreateCompanyCategoryDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "UpdateCompanyCategoryDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "CreateCompanyPostDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "hashTag": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "hashTag",
          "content"
        ]
      },
      "UpdatePostCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreateCompanyOfferDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "hashTag": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "hashTag",
          "content"
        ]
      },
      "UpdateCompanyOfferDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "hashTag": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "categoryId": {
            "type": "string"
          },
          "deleteImages": {
            "description": "Array of attachments to delete",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          }
        },
        "required": [
          "title",
          "hashTag",
          "content",
          "categoryId"
        ]
      },
      "CreateCompanySubscriptionTokenDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string"
          },
          "categoryId": {
            "type": "string"
          }
        },
        "required": [
          "companyId",
          "categoryId"
        ]
      },
      "CreateTokenCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "price": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "description",
          "value",
          "price"
        ]
      },
      "UpdateTokenCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "active"
        ]
      },
      "CreateCompanyParticipationUserTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "UpdateCompanyParticipationUserTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "deleteImages": {
            "description": "Array of image URLs to delete",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          }
        },
        "required": [
          "title",
          "description",
          "status"
        ]
      },
      "CreateUserTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "UpdateUserTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deleteImages": {
            "description": "Array of image objects to delete",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          }
        },
        "required": [
          "title",
          "content",
          "active"
        ]
      },
      "CreateTenderCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateTenderCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ReceiverDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notificationToken": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "notificationToken"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "forAllUsers": {
            "type": "boolean"
          },
          "typeOfSending": {
            "type": "string",
            "enum": [
              "IMMEDIATELY",
              "PUNCTUAL",
              "PROGRAMMED"
            ],
            "example": "IMMEDIATELY"
          },
          "receivers": {
            "description": "List of notification receivers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiverDto"
            }
          },
          "punctualSendDate": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the tournament",
            "example": "2024-12-01T10:00:00.000Z"
          },
          "scheduledNotification": {
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "message",
          "forAllUsers",
          "typeOfSending",
          "receivers",
          "punctualSendDate",
          "scheduledNotification"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "isNotificationSent": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "users": {
            "type": "number",
            "description": "The selected users ID"
          },
          "punctualSendDate": {
            "format": "date-time",
            "type": "string"
          },
          "scheduledNotification": {
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          }
        },
        "required": [
          "isNotificationSent",
          "title",
          "message",
          "users",
          "punctualSendDate",
          "scheduledNotification"
        ]
      },
      "CreateCompanyTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastSubmissionDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "title",
          "content",
          "specifications",
          "lastSubmissionDate"
        ]
      },
      "UpdateCompanyTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deleteImages": {
            "description": "Array of image URLs to delete",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastSubmissionDate": {
            "format": "date-time",
            "type": "string"
          },
          "totalParticipation": {
            "type": "number"
          }
        },
        "required": [
          "title",
          "content",
          "active",
          "specifications",
          "lastSubmissionDate",
          "totalParticipation"
        ]
      },
      "CreateCompanyParticipationCompanyTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "UpdateCompanyParticipationCompanyTenderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "deleteImages": {
            "description": "Array of image URLs to delete",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          }
        },
        "required": [
          "title",
          "description",
          "status"
        ]
      },
      "CreateUserRequestOfferDto": {
        "type": "object",
        "properties": {
          "request": {
            "type": "string"
          }
        },
        "required": [
          "request"
        ]
      },
      "UpdateUserRequestOfferDto": {
        "type": "object",
        "properties": {
          "request": {
            "type": "string"
          },
          "response": {
            "type": "string"
          },
          "closed": {
            "type": "boolean"
          }
        },
        "required": [
          "response",
          "closed"
        ]
      },
      "CreateUserTestimonialDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserTestimonialDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}